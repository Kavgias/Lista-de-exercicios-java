public interface Exibivel {
    void exibirDados();
}

//veiculo
public abstract class Veiculo implements Exibivel {
    private String placa;
    private String modelo;
    private int ano;

    public Veiculo(String placa, String modelo, int ano) {
        this.placa = placa;
        this.modelo = modelo;
        this.ano = ano;
    }

    public String getPlaca() { return placa; }
    public String getModelo() { return modelo; }
    public int getAno() { return ano; }

    public void setPlaca(String placa) { this.placa = placa; }
    public void setModelo(String modelo) { this.modelo = modelo; }
    public void setAno(int ano) { this.ano = ano; }
}

//herança carro
public class Carro extends Veiculo {
    private int qtdPortas;

    public Carro(String placa, String modelo, int ano, int qtdPortas) {
        super(placa, modelo, ano);
        this.qtdPortas = qtdPortas;
    }

    @Override
    public void exibirDados() {
        System.out.println("Carro - Modelo: " + getModelo() + " | Placa: " + getPlaca() +
                           " | Ano: " + getAno() + " | Portas: " + qtdPortas);
    }
}
//moto
public class Moto extends Veiculo {
    private int cilindrada;

    public Moto(String placa, String modelo, int ano, int cilindrada) {
        super(placa, modelo, ano);
        this.cilindrada = cilindrada;
    }

    @Override
    public void exibirDados() {
        System.out.println("Moto - Modelo: " + getModelo() + " | Placa: " + getPlaca() +
                           " | Ano: " + getAno() + " | Cilindrada: " + cilindrada + "cc");
    }
}

//caminhão
public class Caminhao extends Veiculo {
    private double capacidadeCarga;

    public Caminhao(String placa, String modelo, int ano, double capacidadeCarga) {
        super(placa, modelo, ano);
        this.capacidadeCarga = capacidadeCarga;
    }

    @Override
    public void exibirDados() {
        System.out.println("Caminhão - Modelo: " + getModelo() + " | Placa: " + getPlaca() +
                           " | Ano: " + getAno() + " | Carga: " + capacidadeCarga + " toneladas");
    }
}

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Principal {
    public static void main(String[] args) {
        List<Veiculo> veiculos = new ArrayList<>();
        Scanner sc = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n--- MENU ---");
            System.out.println("1 - Cadastrar novo veículo");
            System.out.println("2 - Listar veículos");
            System.out.println("3 - Sair");
            System.out.print("Opção: ");
            opcao = Integer.parseInt(sc.nextLine());

            switch (opcao) {
                case 1 -> {
                    System.out.print("Tipo (1-Carro, 2-Moto, 3-Caminhão): ");
                    int tipo = Integer.parseInt(sc.nextLine());

                    System.out.print("Modelo: ");
                    String modelo = sc.nextLine();
                    System.out.print("Placa: ");
                    String placa = sc.nextLine();
                    System.out.print("Ano: ");
                    int ano = Integer.parseInt(sc.nextLine());

                    switch (tipo) {
                        case 1 -> {
                            System.out.print("Quantidade de portas: ");
                            int portas = Integer.parseInt(sc.nextLine());
                            veiculos.add(new Carro(placa, modelo, ano, portas));
                        }
                        case 2 -> {
                            System.out.print("Cilindrada: ");
                            int cilindrada = Integer.parseInt(sc.nextLine());
                            veiculos.add(new Moto(placa, modelo, ano, cilindrada));
                        }
                        case 3 -> {
                            System.out.print("Capacidade de carga (ton): ");
                            double carga = Double.parseDouble(sc.nextLine());
                            veiculos.add(new Caminhao(placa, modelo, ano, carga));
                        }
                        default -> System.out.println("Tipo inválido.");
                    }
                }
                case 2 -> {
                    if (veiculos.isEmpty()) {
                        System.out.println("Nenhum veículo cadastrado.");
                    } else {
                        System.out.println("\n--- LISTA DE VEÍCULOS ---");
                        for (Veiculo v : veiculos) {
                            v.exibirDados(); // Polimorfismo em ação
                        }
                    }
                }
                case 3 -> System.out.println("Encerrando...");
                default -> System.out.println("Opção inválida.");
            }
        } while (opcao != 3);

        sc.close();
    }
}


